% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TCGA_pipe.R
\name{TCGA.pipe}
\alias{TCGA.pipe}
\title{ELMER analysis pipeline for TCGA data.}
\usage{
TCGA.pipe(disease, genome = "hg38", analysis = "all", wd = "./",
  cores = 1, mode = "unsupervised", Data = NULL, diff.dir = "hypo",
  group.col = "TN", group1 = "Tumor", group2 = "Normal", ...)
}
\arguments{
\item{disease}{TCGA short form disease name such as COAD}

\item{genome}{Data aligned against which genome of reference. Options: "hg19", "hg38" (default)}

\item{analysis}{A vector of characters listing the analysis need to be done.
Analysis can be "download","distal.probes","diffMeth","pair","motif","TF.search".
Default is "all" meaning all the analysis will be processed.}

\item{wd}{A path shows working dirctory. Default is "./"}

\item{cores}{A interger which defines number of core to be used in parallel process. 
Default is 1: don't use parallel process.}

\item{mode}{This option will automatically set the percentage of samples to be used in the analysis.
Options: "supervised" (use 100% of samples) or "unsupervised" (use 20 % of samples).}

\item{Data}{A path shows the folder containing DNA methylation, expression and clinic data}

\item{diff.dir}{A character can be "hypo" or "hyper", showing dirction DNA methylation changes.
If it is "hypo", get.diff.meth function will identify all significantly hypomethylated
CpG sites; If "hyper", get.diff.meth function will identify all significantly hypermethylated
CpG sites}

\item{...}{A list of parameters for functions: GetNearGenes, get.feature.probe, 
get.diff.meth, get.pair}
}
\value{
Different analysis results.
}
\description{
ELMER analysis pipeline for TCGA data. This pipeline combine every steps of \pkg{ELMER}
analyses: get.feature.probe, get.diff.meth, get.pair, get.permu, get.enriched.motif and get.TFs.
Every steps' results are saved.
}
\examples{
\dontrun{
  distal.probe <- TCGA.pipe(disease = "LUSC", analysis="distal.enhancer", wd="~/")
  TCGA.pipe(disease = "LUSC",analysis = "all", genome = "hg19", cores = 1, permu.size=300, Pe=0.01)
  projects <- TCGAbiolinks:::getGDCprojects()$project_id
  projects <- gsub("TCGA-","",projects[grepl('^TCGA',projects,perl=T)])
  for(proj in projects) TCGA.pipe(disease = proj,analysis = "download")
  plyr::alply(sort(projects),1,function(proj) {tryCatch({print(proj);TCGA.pipe(disease = proj,analysis = c("createMAE"))})}, .progress = "text")
  plyr::alply(sort(projects),1,function(proj) {tryCatch({print(proj);TCGA.pipe(disease = proj,analysis = c("diffMeth","pair", "motif","TF.search"))})}, .progress = "text")
}
}
